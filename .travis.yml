language: cpp
sudo: false

matrix:
  include:

    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang35
        apt:
          sources: ['llvm-toolchain-precise-3.5', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.5', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='clang++-3.5' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang35
      env: COMPILER='clang++-3.5' BUILD_TYPE='Debug'


    - os: linux
      compiler: clang
      addons: &clang36
        apt:
          sources: ['llvm-toolchain-precise-3.6', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.6', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='clang++-3.6' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang36
      env: COMPILER='clang++-3.6' BUILD_TYPE='Debug'


    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='clang++-3.7' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: COMPILER='clang++-3.7' BUILD_TYPE='Debug'


    - os: linux
      compiler: clang
      addons: &clang38
        apt:
          sources: ['llvm-toolchain-precise', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.8', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='clang++-3.8' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang38
      env: COMPILER='clang++-3.8' BUILD_TYPE='Debug'


    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc48
        apt:
         sources: ['ubuntu-toolchain-r-test']
         packages: ['g++-4.8', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='g++-4.8' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc48
      env: COMPILER='g++-4.8' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'libboost-locale1.55.0', 'libboost-locale1.55-dev']
      env: COMPILER='g++-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: COMPILER='g++-4.9' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'libboost1.55-all-dev']
      env: COMPILER='g++-5' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: COMPILER='g++-5' BUILD_TYPE='Debug'


    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Release'


    - os: osx
      osx_image: xcode7
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode7
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Release'


install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - DEPS_SRC="${TRAVIS_BUILD_DIR}/deps/src"
  - mkdir -p ${DEPS_SRC} && cd ${DEPS_SRC}
  - CMAKE_VER="cmake-2.8.12.2"
  - CMAKE_ARC="${CMAKE_VER}.tar.gz"
  - CMAKE_URL="http://cmake.org/files/v2.8/${CMAKE_ARC}"
  - echo wget --quiet -O ${CMAKE_ARC} ${CMAKE_URL} --no-check-certificate
  - wget -O ${CMAKE_ARC} ${CMAKE_URL} --no-check-certificate
  - tar -zxf ${CMAKE_ARC}
  - mkdir build-${CMAKE_VER} && cd build-${CMAKE_VER}
  - ../${CMAKE_VER}/configure --prefix=${DEPS_DIR}
  - make
  - make install
  - export PATH={DEPS_DIR}/bin:$PATH
  #- |
  #  if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
  #    CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
  #    mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  #    export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  #  elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
  #    brew install cmake ccache
  #  fi

before_script:
  - export PATH=${TRAVIS_BUILD_DIR}/deps/bin:${PATH}
  - export CXX=${COMPILER}
  - cd ${TRAVIS_BUILD_DIR}
  - pwd
  - ls -la
  - which cmake
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

script:
  - make test
